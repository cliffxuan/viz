{"version":3,"sources":["TreeSpec.ts","tokenizer.ts","parser.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["spec","$schema","description","width","height","padding","signals","data","name","transform","type","key","parentKey","method","size","signal","separation","as","source","orient","shape","scales","range","scheme","domain","field","zero","marks","from","encode","update","path","stroke","value","enter","x","y","fill","scale","text","fontSize","baseline","dx","align","splitWith","str","sep","parts","split","positions","part","last","length","search","push","zip","map","trim","tokenize","graph","arrows","chain","index","filter","p","startCol","rowNum","nodes","slice","prev","prevPos","next","nextPos","pair","endCol","startRow","endRow","extractPairs","fromPairs","flatten","arrow","Vertex","id","predecessors","successors","this","cache","isAcyclic","Infinity","undefined","cachedValue","result","apply","Math","min","v","depth","vertex","visited","successor","includes","successorPath","pathTo","concat","isDescendant","descendants","Arrow","start","end","DirectedGraph","vertices","isTree","isMultiTree","treePairs","restPairs","toPair","newGraph","pop","e","max","roots","root","parent","pairs","nameToVertex","predecessorName","successorName","predecessorId","successorId","predecessor","Object","values","Tree","Error","parse","pairToPos","pairsWithPos","ps","groupByPair","useStyles","makeStyles","theme","createStyles","display","flexDirection","appBar","backgroundColor","color","saveButton","marginLeft","spacing","main","flexGrow","overflow","pane","paper","palette","secondary","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","render","match","GraphContainer","docId","params","makeid","characters","charactersLength","i","charAt","floor","random","useState","setData","redirect","setRedirect","useEffect","a","collection","doc","get","exists","replace","fetchDoc","to","Graph","handleChange","handleSave","set","MultiTree","multiTree","tree","fromRoot","breadth","E","Vega","treeSpec","editorRef","useRef","classes","isEditorReady","setIsEditorReady","directedGraph","pairToPositions","findTree","rest","errors","startLineNumber","startColumn","endLineNumber","endColumn","message","useLayoutEffect","monaco","init","then","monacoInstance","current","editor","setModelMarkers","getModel","error","severity","MarkerSeverity","className","AppBar","position","elevation","Toolbar","Typography","variant","Button","onClick","Grid","container","item","xs","md","Paper","square","language","editorDidMount","_","onChange","options","minimap","enabled","scrollBeyondLastLine","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"+YAoGeA,G,OAlGI,CACjBC,QAAS,6CACTC,YACE,gFACFC,MAAO,IACPC,OAAQ,KACRC,QAAS,EAETC,QAAS,GAETC,KAAM,CACJ,CACEC,KAAM,OACNC,UAAW,CACT,CACEC,KAAM,WACNC,IAAK,KACLC,UAAW,UAEb,CACEF,KAAM,OACNG,OAAQ,OACRC,KAAM,CAAC,CAAEC,OAAQ,UAAY,CAAEA,OAAQ,gBACvCC,YAAY,EACZC,GAAI,CAAC,IAAK,IAAK,QAAS,eAI9B,CACET,KAAM,QACNU,OAAQ,OACRT,UAAW,CACT,CAAEC,KAAM,aACR,CACEA,KAAM,WACNS,OAAQ,aACRC,MAAO,eAMfC,OAAQ,CACN,CACEb,KAAM,QACNE,KAAM,SACNY,MAAO,CAAEC,OAAQ,SACjBC,OAAQ,CAAEjB,KAAM,OAAQkB,MAAO,SAC/BC,MAAM,IAIVC,MAAO,CACL,CACEjB,KAAM,OACNkB,KAAM,CAAErB,KAAM,SACdsB,OAAQ,CACNC,OAAQ,CACNC,KAAM,CAAEN,MAAO,QACfO,OAAQ,CAAEC,MAAO,WAIvB,CACEvB,KAAM,SACNkB,KAAM,CAAErB,KAAM,QACdsB,OAAQ,CACNK,MAAO,CACLpB,KAAM,CAAEmB,MAAO,KACfD,OAAQ,CAAEC,MAAO,SAEnBH,OAAQ,CACNK,EAAG,CAAEV,MAAO,KACZW,EAAG,CAAEX,MAAO,KACZY,KAAM,CAAEC,MAAO,QAASb,MAAO,YAIrC,CACEf,KAAM,OACNkB,KAAM,CAAErB,KAAM,QACdsB,OAAQ,CACNK,MAAO,CACLK,KAAM,CAAEd,MAAO,QACfe,SAAU,CAAEP,MAAO,GACnBQ,SAAU,CAAER,MAAO,WAErBH,OAAQ,CACNK,EAAG,CAAEV,MAAO,KACZW,EAAG,CAAEX,MAAO,KACZiB,GAAI,CAAE3B,OAAQ,2BACd4B,MAAO,CAAE5B,OAAQ,2C,gGC9EpB,SAAS6B,EAAUC,EAAaC,GACrC,IAD2E,EACrEC,EAAQF,EAAIG,MAAMF,GAClBG,EAAY,CAAC,GAFwD,cAG1DF,GAH0D,IAG3E,2BAAwB,CAAC,IAAhBG,EAAe,QAChBC,EAAOF,EAAUA,EAAUG,OAAS,GAC1CH,EAAUA,EAAUG,OAAS,GAAKD,EAAOD,EAAKG,OAAO,MACrDJ,EAAUK,KAAKH,EAAOD,EAAKE,OAASN,EAAIM,SANiC,8BAQ3E,OAAOG,YACLR,EAAMS,KAAI,SAACN,GAAD,OAAUA,EAAKO,UACzBR,GAqBG,SAASS,EAASC,GACvB,IAAMC,EAASD,EAAMX,MAAM,MAAMQ,KAAI,SAACK,EAAOC,GAAR,OACnClB,EAAUiB,EAAO,KACdE,QAAO,mCAAEC,EAAF,gBAAyB,KAAbA,EAAEP,UACrBD,KAAI,0CArBJ,SACLK,EACAI,EACAC,GAEA,IAAMC,EAAQvB,EAAUiB,EAAO,MAC/B,OAAON,YAAIY,EAAOA,EAAMC,MAAM,IAAIZ,KAChC,yDAAGa,EAAH,KAASC,EAAT,2BAAoBC,EAApB,KAA0BC,EAA1B,WAAyC,CACvCC,KAAM,CAACJ,EAAME,GACbN,SAAUA,EAAWK,EAAU,EAC/BI,OAAQT,EAAWO,EAAUD,EAAKnB,OAAS,EAC3CuB,SAAUT,EACVU,OAAQV,MASoBW,CAAvB,UAAqDf,EAAQ,SAEtE,OAAOgB,YAAUC,YAAQnB,GAAQJ,KAAI,SAACwB,EAAOlB,GAAR,MAAkB,CAACA,EAAOkB,OCjD1D,IAAMC,EAAb,WAME,WACEC,EACA1E,EACA2E,EACAC,GACC,yBAVHF,QAUE,OATF1E,UASE,OARF2E,kBAQE,OAPFC,gBAOE,EACAC,KAAKH,GAAKA,EACVG,KAAK7E,KAAOA,EACZ6E,KAAKF,aAAL,OAAoBA,QAApB,IAAoBA,IAAiB,GACrCE,KAAKD,WAAL,OAAkBA,QAAlB,IAAkBA,IAAe,GAfrC,kDAkBQE,GACJ,IAAKD,KAAKE,UACR,OAAOC,IAET,QAAcC,IAAVH,EAAqB,CACvB,IAAMI,EAAcJ,EAAMD,KAAKH,IAC/B,QAAoBO,IAAhBC,EACF,OAAOA,EAIX,IAAMC,EACJN,KAAKF,aAAa/B,OAAS,EACvBwC,YACEC,KAAKC,IACLT,KAAKF,aAAa3B,KAAI,SAACuC,GAAD,OAAOA,EAAEC,MAAMV,OACnC,EACJ,EAIN,YAHcG,IAAVH,IACFA,EAAMD,KAAKH,IAAMS,GAEZA,IAvCX,6BA0CSM,EAAgBC,GAIrB,QAHgBT,IAAZS,IACFA,EAAU,IAEmB,IAA3Bb,KAAKD,WAAWhC,OAClB,OAAO,KAL2D,oBAO9CiC,KAAKD,YAPyC,IAOpE,2BAAuC,CAAC,IAA/Be,EAA8B,QACrC,GAAIA,IAAcF,EAChB,MAAO,CAACZ,KAAMc,GAEhB,GAAID,EAAQE,SAASD,GACnB,OAAO,KAETD,EAAQ5C,KAAK6C,GACb,IAAME,EAAgBF,EAAUG,OAAOL,EAAQC,GAC/C,GAAsB,OAAlBG,EAGF,MAAO,CAAChB,MAAgBkB,OAAOF,IAnBiC,8BAsBpE,OAAO,OAhEX,mCAmEeJ,GAA0B,IAAD,OACpC,OAAIA,IAAWZ,MAIbY,EAAOb,WAAWrB,QAAO,SAACoC,GAAD,OAAe,EAAKK,aAAaL,MACvD/C,OAAS,IAzElB,kCAkFI,OAAOiC,KAAKD,WAAWmB,OACrBxB,YAAQM,KAAKD,WAAW5B,KAAI,SAAC2C,GAAD,OAAeA,EAAUM,mBAnF3D,gCAwFI,GAA0B,OAAtBpB,KAAKiB,OAAOjB,MACd,OAAO,EAFc,oBAIDA,KAAKD,YAJJ,IAIvB,2BAAuC,CACrC,IADqC,QACtBG,UACb,OAAO,GANY,8BASvB,OAAO,MAhGX,KAoGamB,EAAb,WACE,WAAmBC,EAAsBC,GAAc,yBAApCD,QAAmC,KAAbC,MAD3C,uDAII,MAAM,GAAN,OAAUvB,KAAKsB,MAAMnG,KAArB,eAAgC6E,KAAKuB,IAAIpG,QAJ7C,+BAQI,MAAO,CAAC6E,KAAKsB,MAAMnG,KAAM6E,KAAKuB,IAAIpG,UARtC,KAYaqG,EAAb,WAGE,WAAYC,GAA0B,yBAFtCA,cAEqC,EACnCzB,KAAKyB,SAAWA,EAJpB,uDAuFI,GAAIzB,KAAK0B,QAAU1B,KAAK2B,YACtB,MAAO,CAAC3B,KAAM,IAEhB,IAJmD,EAI7C4B,EAAY,GACZC,EAAY,GACdvD,EAAQ,IAAIkD,EAAc,IANqB,cAOjCxB,KAAKzB,QAP4B,IAOnD,2BAA+B,CAAC,IAAvBoB,EAAsB,QAC7BiC,EAAU3D,KAAK0B,EAAMmC,UACrB,IAAIC,EAAWP,EAAc/B,UAAUmC,GACjCG,EAASJ,aAAeI,EAASL,OAIrCpD,EAAQyD,GAHRH,EAAUI,MACVH,EAAU5D,KAAK0B,EAAMmC,YAZ0B,8BAiBnD,MAAO,CAACxD,EAAOuD,KAvGnB,6BAQI,OAAOnC,YACLM,KAAKyB,SAAStD,KAAI,SAACuC,GAAD,OAAOA,EAAEX,WAAW5B,KAAI,SAAC8D,GAAD,OAAO,IAAIZ,EAAMX,EAAGuB,YATpE,4BAcI,IAAKjC,KAAKE,UACR,OAAOC,IAET,IAAMF,EAAQ,GACd,OAAOM,YACLC,KAAK0B,IACLlC,KAAKyB,SAAStD,KAAI,SAACuC,GAAD,OAAOA,EAAEC,MAAMV,SApBvC,8BAyBI,OAAOD,KAAKyB,SAAS/C,QAAO,SAACgC,GAAD,OAA+B,IAAxBA,EAAEX,WAAWhC,UAAcA,SAzBlE,2BA4B0B,IAAD,OACrB,OAAIiC,KAAK0B,QAAU1B,KAAK2B,YACf3B,KAAKmC,MAAMhE,KAAI,SAACiE,GAAD,OACpB,EAAKX,SACF/C,QAAO,SAACgC,GAAD,OAAOA,EAAES,aAAaiB,MAC7BjE,KAAI,SAACuC,GAAD,YAAgB,CACnBb,GAAIa,EAAEb,GACN1E,KAAMuF,EAAEvF,KACRkH,OAAM,UAAE3B,EAAEZ,aAAa,UAAjB,aAAE,EAAmBD,UAI5B,KAxCX,4BA4CI,OAAOG,KAAKyB,SAAS/C,QAAO,SAACgC,GAAD,OAAiC,IAA1BA,EAAEZ,aAAa/B,YA5CtD,6BAgDI,OAA0B,IAAtBiC,KAAKmC,MAAMpE,WAGXiC,KAAKyB,SAAS/C,QAAO,SAACgC,GAAD,OAAOA,EAAEZ,aAAa/B,OAAS,KAAGA,OAAS,MAGhEiC,KAAKyB,SAAS/C,QAAO,SAACgC,GAAD,OAAOA,EAAEZ,aAAaiB,SAASL,MAAI3C,OAAS,MAtDzE,kCA6DI,QAAIiC,KAAKmC,MAAMpE,OAAS,OAGpBiC,KAAKyB,SAAS/C,QAAO,SAACgC,GAAD,OAAOA,EAAEZ,aAAa/B,OAAS,KAAGA,OAAS,MAGhEiC,KAAKyB,SAAS/C,QAAO,SAACgC,GAAD,OAAOA,EAAEZ,aAAaiB,SAASL,MAAI3C,OAAS,MAnEzE,gCA0EI,OAA6B,IAAzBiC,KAAKyB,SAAS1D,QAGQ,IAAtBiC,KAAKmC,MAAMpE,SAGW,IAAtBiC,KAAKmC,MAAMpE,QACNiC,KAAKmC,MAAM,GAAGjC,cAjF3B,iCA0GmBoC,GACf,IAD8D,EACxDC,EAAuC,GACzC1C,GAAM,EAFoD,cAGfyC,GAHe,IAG9D,2BAAsD,CAAC,IAAD,6BAA1CE,EAA0C,KAAzBC,EAAyB,KAChDC,EAAa,UAAGH,EAAaC,UAAhB,aAAG,EAA+B3C,GAC/C8C,EAAW,UAAGJ,EAAaE,UAAhB,aAAG,EAA6B5C,QAEzBO,IAAlBsC,IACFA,IAAkB7C,EAClB0C,EAAaC,GAAmB,IAAI5C,EAClC8C,EACAF,SAGgBpC,IAAhBuC,IACFA,IAAgB9C,EAChB0C,EAAaE,GAAiB,IAAI7C,EAAO+C,EAAaF,IAExD,IAAM3B,EAAYyB,EAAaE,GACzBG,EAAcL,EAAaC,GACjC1B,EAAUhB,aAAa7B,KAAK2E,GAC5BA,EAAY7C,WAAW9B,KAAK6C,IArBgC,8BAuB9D,OAAO,IAAIU,EAAcqB,OAAOC,OAAOP,QAjI3C,KAqIaQ,EAAb,kDACE,WAAYtB,GAA0B,IAAD,EAEnC,GAFmC,sBACnC,cAAMA,IACIC,OACR,MAAM,IAAIsB,MAAM,gBAHiB,SADvC,iDAaI,OAAO,kDAAW,MAbtB,gCAQkBZ,GACd,OAAO,IAAIW,EAAK,CAACX,GAAMlB,OAAOkB,EAAKhB,kBATvC,GAA0BI,GAqBnB,SAASyB,EAAM3E,GACpB,IAAM4E,EDvND,SAAqBC,GAE1B,IADA,IAAMD,EAAyC,GAC/C,MAAeL,OAAOC,OAAOK,GAA7B,eAA4C,CAAvC,IAAIC,EAAE,KACDhE,EAASgE,EAAThE,KACF9D,EAAG,UAAM8D,EAAK,GAAX,eAAoBA,EAAK,SACXgB,IAAnB8C,EAAU5H,KACZ4H,EAAU5H,GAAO,IAEnB4H,EAAU5H,GAAK2C,KAAKmF,GAEtB,OAAOF,EC6MmCG,CAAYhF,EAASC,IACzDgE,EAAQO,OAAOC,OAAOI,GAAW/E,KAAI,SAACQ,GAAD,OAAOA,EAAE,GAAGS,QACvD,MAAO,CAACoC,EAAc/B,UAAU6C,GAAQY,GCzP1C,IAAMI,EAAYC,aAAW,SAACC,GAC5B,OAAOC,YAAa,CAClBrB,KAAM,CACJrH,OAAQ,QACR2I,QAAS,OACTC,cAAe,UAEjBC,OAAQ,CACNC,gBAAiB,OACjBC,MAAO,QAETC,WAAY,CACVC,WAAYR,EAAMS,QAAQ,IAE5BC,KAAM,CACJC,SAAU,EACVR,cAAe,cACfS,SAAU,OACVpJ,QAASwI,EAAMS,QAAQ,IAEzBI,KAAM,CACJtJ,OAAQ,QAEVuJ,MAAO,CACLR,MAAON,EAAMe,QAAQrH,KAAKsH,UAC1BzJ,OAAQ,OACRqJ,SAAU,aAMhBK,IAASC,cAAc,CACrBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAEjB,IAAMC,EAAYV,IAASU,YAEZ,SAASC,IACtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE1I,KAAK,UACL2I,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OAAe,kBAACC,EAAD,CAAgBC,MAAOF,EAAMG,OAAOD,WAE7D,kBAAC,IAAD,CAAO9I,KAAK,IAAI2I,OAAQ,kBAAM,kBAACE,EAAD,CAAgBC,MAAM,iBAU5D,SAASE,EAAO3H,GAKd,IAJA,IAAIuC,EAAS,GACTqF,EACF,iEACEC,EAAmBD,EAAW5H,OACzB8H,EAAI,EAAGA,EAAI9H,EAAQ8H,IAC1BvF,GAAUqF,EAAWG,OAAOtF,KAAKuF,MAAMvF,KAAKwF,SAAWJ,IAEzD,OAAOtF,EAGT,SAASiF,EAAT,GAAyD,IAA/BC,EAA8B,EAA9BA,MAA8B,EAC9BS,mBAAS,IADqB,mBAC/C/K,EAD+C,KACzCgL,EADyC,OAEtBD,mBAAwB,MAFF,mBAE/CE,EAF+C,KAErCC,EAFqC,KAkBtD,OAdAC,qBAAU,YACM,uCAAG,gCAAAC,EAAA,sEACGnB,EAAUoB,WAAW,UAAUC,IAAIhB,GAAOiB,MAD7C,OACTD,EADS,OAETtL,EAFS,UAEFsL,EAAItL,cAFF,aAEF,EAAYoD,MACpBkI,EAAIE,QAAmB,OAATxL,GAGjBkL,EAAY,MACZF,EAAQhL,EAAKyL,QAAQ,QAAS,QAH9BP,EAAY,IAJC,2CAAH,qDAUdQ,KACC,CAACpB,IAEa,OAAbW,EACK,kBAAC,IAAD,CAAUU,GAAIV,IAGrB,kBAACW,EAAD,CACE5L,KAAMA,EACN6L,aAAcb,EACdc,WAAU,uCAAE,WAAO9L,GAAP,eAAAoL,EAAA,6DACJzG,EAAK6F,EAAO,GADR,SAEJP,EAAUoB,WAAW,UAAUC,IAAI3G,GAAIoH,IAAI,CAAE3I,MAAOpD,IAFhD,OAGVkL,EAAYvG,GAHF,2CAAF,wDAehB,SAASqH,EAAT,GAAiE,IAA5CC,EAA2C,EAA3CA,UACnB,OACE,oCACGA,EAAUhF,MAAMhE,KAAI,SAACiE,EAAM3D,GAC1B,IAAM2I,EAAOrE,EAAKsE,SAASjF,GACrBzB,EAAQyG,EAAKzG,MACb7F,EAAQ6F,IAAUR,IAAW,IAAM,IAAMQ,EACzC2G,EAAUF,EAAKE,QAEfvM,EAASuM,GADD,YAAK9G,KAAK+G,GAAOD,EAAU,IAAM,GAE/C,OACE,kBAACE,EAAA,EAAD,CACElM,IAAKmD,EACL9D,KAAI,eAAO8M,EAAP,CAAiB3M,QAAOC,WAC5BG,KAAM,CAAEkM,KAAMA,EAAKlM,YAY/B,SAAS4L,EAAT,GAAgE,IAA/C5L,EAA8C,EAA9CA,KAAM6L,EAAwC,EAAxCA,aAAcC,EAA0B,EAA1BA,WAC7BU,EAAYC,iBAAyB,MACrCC,EAAUtE,IAF6C,EAGnB2C,oBAAS,GAHU,mBAGtD4B,EAHsD,KAGvCC,EAHuC,OAIpB7E,EAAM/H,GAJc,mBAItD6M,EAJsD,KAIvCC,EAJuC,OAKxCD,EAAcE,WAL0B,mBAKtDb,EALsD,KAKhDc,EALgD,KAMvDC,EAASzI,YACbwI,EAAK/J,KAAI,SAACiB,GAAD,OAAU4I,EAAgB,GAAD,OAAI5I,EAAK,GAAT,eAAkBA,EAAK,SACzDjB,KAAI,kBAA6C,CACjDiK,gBADI,EAAG9I,SAEP+I,YAFI,EAAazJ,SAGjB0J,cAHI,EAAuB/I,OAI3BgJ,UAJI,EAA+BlJ,OAKnCmJ,QAAS,4DAGXC,2BAAgB,WACdC,SAAOC,OAAOC,MAAK,SAACC,GACdhB,GAAuC,OAAtBH,EAAUoB,SAC7BD,EAAeE,OAAOC,gBACpBtB,EAAUoB,QAAQG,WAClB,QACAd,EAAOhK,KAAI,SAAC+K,GAAD,sBACNA,EADM,CAETC,SAAUN,EAAeO,eAAepG,kBAYlD,OACE,yBAAKqG,UAAWzB,EAAQxF,MACtB,kBAACkH,EAAA,EAAD,CAAQC,SAAS,SAASF,UAAWzB,EAAQhE,OAAQ4F,UAAW,GAC9D,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,+BACA,kBAACC,EAAA,EAAD,CACEP,UAAWzB,EAAQ7D,WACnB8F,QAAS,kBAAM7C,EAAW9L,KAE1B,kBAAC,IAAD,MAJF,UASJ,kBAAC4O,EAAA,EAAD,CAAMC,WAAS,EAAC9F,QAAS,EAAGoF,UAAWzB,EAAQ1D,MAC7C,kBAAC4F,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGb,UAAWzB,EAAQvD,MAC3C,kBAAC8F,EAAA,EAAD,CAAOR,QAAQ,WAAWN,UAAWzB,EAAQtD,MAAO8F,QAAM,GACxD,kBAAClD,EAAD,CAAWC,UAAWC,MAG1B,kBAAC0C,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGb,UAAWzB,EAAQvD,MAC3C,kBAAC8F,EAAA,EAAD,CAAOR,QAAQ,WAAWN,UAAWzB,EAAQtD,MAAO8F,QAAM,GACxD,kBAAC,mBAAD,CACEC,SAAS,aACTzN,MAAO1B,EACPJ,MAAM,OACNwP,eA/BiC,SAACC,EAAGxB,GAC/CjB,GAAiB,GACjBJ,EAAUoB,QAAUC,GA8BVyB,SAAU,SAACD,EAAG3N,GAAJ,YACEwD,IAAVxD,EAAsBA,EAAQmK,EAAanK,IAE7C6N,QAAS,CACPC,QAAS,CAAEC,SAAS,GACpBC,sBAAsB,SC1NlBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS1F,MACvB,2DCZN2F,IAAS5F,OACP,kBAAC,IAAM6F,WAAP,KACE,kBAAC9F,EAAD,OAEF+F,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3C,MAAK,SAAA4C,GACJA,EAAaC,gBAEdC,OAAM,SAAAxC,GACLyC,QAAQzC,MAAMA,EAAMV,c","file":"static/js/main.238b50db.chunk.js","sourcesContent":["import { Spec } from \"vega\";\n\nconst spec: Spec = {\n  $schema: \"https://vega.github.io/schema/vega/v5.json\",\n  description:\n    \"An example of Cartesian layouts for a node-link diagram of hierarchical data.\",\n  width: 600,\n  height: 1600,\n  padding: 5,\n\n  signals: [],\n\n  data: [\n    {\n      name: \"tree\",\n      transform: [\n        {\n          type: \"stratify\",\n          key: \"id\",\n          parentKey: \"parent\",\n        },\n        {\n          type: \"tree\",\n          method: \"tidy\",\n          size: [{ signal: \"height\" }, { signal: \"width - 100\" }],\n          separation: false,\n          as: [\"y\", \"x\", \"depth\", \"children\"],\n        },\n      ],\n    },\n    {\n      name: \"links\",\n      source: \"tree\",\n      transform: [\n        { type: \"treelinks\" },\n        {\n          type: \"linkpath\",\n          orient: \"horizontal\",\n          shape: \"diagonal\",\n        },\n      ],\n    },\n  ],\n\n  scales: [\n    {\n      name: \"color\",\n      type: \"linear\",\n      range: { scheme: \"magma\" },\n      domain: { data: \"tree\", field: \"depth\" },\n      zero: true,\n    },\n  ],\n\n  marks: [\n    {\n      type: \"path\",\n      from: { data: \"links\" },\n      encode: {\n        update: {\n          path: { field: \"path\" },\n          stroke: { value: \"#ccc\" },\n        },\n      },\n    },\n    {\n      type: \"symbol\",\n      from: { data: \"tree\" },\n      encode: {\n        enter: {\n          size: { value: 100 },\n          stroke: { value: \"#fff\" },\n        },\n        update: {\n          x: { field: \"x\" },\n          y: { field: \"y\" },\n          fill: { scale: \"color\", field: \"depth\" },\n        },\n      },\n    },\n    {\n      type: \"text\",\n      from: { data: \"tree\" },\n      encode: {\n        enter: {\n          text: { field: \"name\" },\n          fontSize: { value: 9 },\n          baseline: { value: \"middle\" },\n        },\n        update: {\n          x: { field: \"x\" },\n          y: { field: \"y\" },\n          dx: { signal: \"datum.children ? -7 : 7\" },\n          align: { signal: \"datum.children ? 'right' : 'left'\" },\n        },\n      },\n    },\n  ],\n};\n\nexport default spec;\n","import { flatten, zip, slice, fromPairs } from \"ramda\";\n\nexport function toPairs(chain: string): Array<[string, string]> {\n  const nodes = chain.split(\"->\").map((x: string) => x.trim());\n  return zip(nodes, slice(1, Infinity, nodes));\n}\n\nexport type Pair = {\n  pair: [string, string];\n  startRow: number;\n  endRow: number;\n  startCol: number;\n  endCol: number;\n};\n\nexport function splitWith(str: string, sep: string): Array<[string, number]> {\n  const parts = str.split(sep);\n  const positions = [1];\n  for (let part of parts) {\n    const last = positions[positions.length - 1];\n    positions[positions.length - 1] = last + part.search(/\\S/);\n    positions.push(last + part.length + sep.length);\n  }\n  return zip(\n    parts.map((part) => part.trim()),\n    positions\n  );\n}\n\nexport function extractPairs(\n  chain: string,\n  startCol: number,\n  rowNum: number\n): Array<Pair> {\n  const nodes = splitWith(chain, \"->\");\n  return zip(nodes, nodes.slice(1)).map(\n    ([[prev, prevPos], [next, nextPos]]) => ({\n      pair: [prev, next] as [string, string],\n      startCol: startCol + prevPos - 1,\n      endCol: startCol + nextPos + next.length - 1,\n      startRow: rowNum,\n      endRow: rowNum,\n    })\n  );\n}\n\nexport function tokenize(graph: string): Record<number, Pair> {\n  const arrows = graph.split(\"\\n\").map((chain, index) =>\n    splitWith(chain, \";\")\n      .filter(([p, _]) => p.trim() !== \"\")\n      .map(([arrow, startCol]) => extractPairs(arrow, startCol, index + 1))\n  );\n  return fromPairs(flatten(arrows).map((arrow, index) => [index, arrow]));\n}\n\nexport function groupByPair(pairsWithPos: Record<number, Pair>) : Record<string, Array<Pair>> {\n  const pairToPos: Record<string, Array<Pair>> = {};\n  for (let ps of Object.values(pairsWithPos)) {\n    const { pair } = ps;\n    const key = `${pair[0]} -> ${pair[1]}`;\n    if (pairToPos[key] === undefined) {\n      pairToPos[key] = [];\n    }\n    pairToPos[key].push(ps);\n  }\n  return pairToPos;\n}","import { apply, flatten } from \"ramda\";\nimport { tokenize, Pair, groupByPair } from \"./tokenizer\";\n\nexport class Vertex {\n  id: number;\n  name: string;\n  predecessors: Array<Vertex>;\n  successors: Array<Vertex>;\n\n  constructor(\n    id: number,\n    name: string,\n    predecessors?: Array<Vertex>,\n    successors?: Array<Vertex>\n  ) {\n    this.id = id;\n    this.name = name;\n    this.predecessors = predecessors ?? ([] as Vertex[]);\n    this.successors = successors ?? ([] as Vertex[]);\n  }\n\n  depth(cache?: Record<number, number>): number {\n    if (!this.isAcyclic) {\n      return Infinity;\n    }\n    if (cache !== undefined) {\n      const cachedValue = cache[this.id];\n      if (cachedValue !== undefined) {\n        return cachedValue;\n      }\n    }\n    // TODO cyclic\n    const result =\n      this.predecessors.length > 0\n        ? apply(\n            Math.min,\n            this.predecessors.map((v) => v.depth(cache))\n          ) + 1\n        : 1;\n    if (cache !== undefined) {\n      cache[this.id] = result;\n    }\n    return result;\n  }\n\n  pathTo(vertex: Vertex, visited?: Array<Vertex>): Array<Vertex> | null {\n    if (visited === undefined) {\n      visited = [] as Vertex[];\n    }\n    if (this.successors.length === 0) {\n      return null;\n    }\n    for (let successor of this.successors) {\n      if (successor === vertex) {\n        return [this, successor] as Vertex[];\n      }\n      if (visited.includes(successor)) {\n        return null;\n      }\n      visited.push(successor);\n      const successorPath = successor.pathTo(vertex, visited); // recursive\n      if (successorPath === null) {\n        continue;\n      } else {\n        return [this as Vertex].concat(successorPath);\n      }\n    }\n    return null;\n  }\n\n  isDescendant(vertex: Vertex): boolean {\n    if (vertex === this) {\n      return true;\n    }\n    if (\n      vertex.successors.filter((successor) => this.isDescendant(successor))\n        .length > 0\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  get descendants(): Array<Vertex> {\n    // TODO too much recursion\n    return this.successors.concat(\n      flatten(this.successors.map((successor) => successor.descendants))\n    );\n  }\n\n  get isAcyclic(): boolean {\n    if (this.pathTo(this) !== null) {\n      return false;\n    }\n    for (let successor of this.successors) {\n      if (!successor.isAcyclic) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nexport class Arrow {\n  constructor(public start: Vertex, public end: Vertex) {}\n\n  toString(): string {\n    return `${this.start.name} -> ${this.end.name}`;\n  }\n\n  toPair(): [string, string] {\n    return [this.start.name, this.end.name];\n  }\n}\n\nexport class DirectedGraph {\n  vertices: Array<Vertex>;\n\n  constructor(vertices: Array<Vertex>) {\n    this.vertices = vertices;\n  }\n\n  get arrows(): Array<Arrow> {\n    return flatten(\n      this.vertices.map((v) => v.successors.map((e) => new Arrow(v, e)))\n    );\n  }\n\n  get depth(): number {\n    if (!this.isAcyclic) {\n      return Infinity;\n    }\n    const cache = {};\n    return apply(\n      Math.max,\n      this.vertices.map((v) => v.depth(cache))\n    );\n  }\n\n  get breadth(): number {\n    return this.vertices.filter((v) => v.successors.length === 0).length;\n  }\n\n  get data(): Array<any> {\n    if (this.isTree || this.isMultiTree) {\n      return this.roots.map((root) =>\n        this.vertices\n          .filter((v) => v.isDescendant(root))\n          .map((v: Vertex) => ({\n            id: v.id,\n            name: v.name,\n            parent: v.predecessors[0]?.id,\n          }))\n      );\n    }\n    return []; // TODO find sub graph\n  }\n\n  get roots(): Array<Vertex> {\n    return this.vertices.filter((v) => v.predecessors.length === 0);\n  }\n\n  get isTree(): boolean {\n    if (this.roots.length !== 1) {\n      return false;\n    }\n    if (this.vertices.filter((v) => v.predecessors.length > 1).length > 0) {\n      return false;\n    }\n    if (this.vertices.filter((v) => v.predecessors.includes(v)).length > 0) {\n      return false;\n    }\n    return true;\n  }\n\n  get isMultiTree(): boolean {\n    if (this.roots.length < 2) {\n      return false;\n    }\n    if (this.vertices.filter((v) => v.predecessors.length > 1).length > 0) {\n      return false;\n    }\n    if (this.vertices.filter((v) => v.predecessors.includes(v)).length > 0) {\n      return false;\n    }\n    return true;\n  }\n\n  get isAcyclic(): boolean {\n    if (this.vertices.length === 0) {\n      return true;\n    }\n    if (this.roots.length === 0) {\n      return false;\n    }\n    if (this.roots.length === 1) {\n      return this.roots[0].isAcyclic;\n    }\n    return true;\n  }\n\n  findTree(): [DirectedGraph, Array<[string, string]>] {\n    if (this.isTree || this.isMultiTree) {\n      return [this, []];\n    }\n    const treePairs = [];\n    const restPairs = [];\n    let graph = new DirectedGraph([]);\n    for (let arrow of this.arrows) {\n      treePairs.push(arrow.toPair());\n      let newGraph = DirectedGraph.fromPairs(treePairs);\n      if (!(newGraph.isMultiTree || newGraph.isTree)) {\n        treePairs.pop();\n        restPairs.push(arrow.toPair());\n      } else {\n        graph = newGraph;\n      }\n    }\n    return [graph, restPairs];\n  }\n\n  static fromPairs(pairs: Array<[string, string]>): DirectedGraph {\n    const nameToVertex: Record<string, Vertex> = {};\n    let id = -1;\n    for (const [predecessorName, successorName] of pairs) {\n      let predecessorId = nameToVertex[predecessorName]?.id;\n      let successorId = nameToVertex[successorName]?.id;\n\n      if (predecessorId === undefined) {\n        predecessorId = ++id;\n        nameToVertex[predecessorName] = new Vertex(\n          predecessorId,\n          predecessorName\n        );\n      }\n      if (successorId === undefined) {\n        successorId = ++id;\n        nameToVertex[successorName] = new Vertex(successorId, successorName);\n      }\n      const successor = nameToVertex[successorName];\n      const predecessor = nameToVertex[predecessorName];\n      successor.predecessors.push(predecessor);\n      predecessor.successors.push(successor);\n    }\n    return new DirectedGraph(Object.values(nameToVertex));\n  }\n}\n\nexport class Tree extends DirectedGraph {\n  constructor(vertices: Array<Vertex>) {\n    super(vertices);\n    if (!this.isTree) {\n      throw new Error(\"invalid tree\");\n    }\n  }\n\n  static fromRoot(root: Vertex): Tree {\n    return new Tree([root].concat(root.descendants));\n  }\n\n  get data(): Array<{ id: number; name: string; predecessors?: number }> {\n    return super.data[0] as Array<{\n      id: number;\n      name: string;\n      predecessors?: number;\n    }>;\n  }\n}\n\nexport function parse(graph: string): [DirectedGraph, Record<string, Pair[]>] {\n  const pairToPos: Record<string, Pair[]> = groupByPair(tokenize(graph));\n  const pairs = Object.values(pairToPos).map((p) => p[0].pair);\n  return [DirectedGraph.fromPairs(pairs), pairToPos];\n}\n","import React, { useState, useEffect, useRef, useLayoutEffect } from \"react\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Grid, Paper, AppBar, Toolbar, Button } from \"@material-ui/core\";\nimport SaveOutlinedIcon from \"@material-ui/icons/SaveOutlined\";\nimport { Vega } from \"react-vega\";\nimport {\n  ControlledEditor as Editor,\n  monaco,\n  EditorDidMount,\n} from \"@monaco-editor/react\";\nimport firebase from \"firebase/app\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport \"firebase/firestore\";\nimport treeSpec from \"./TreeSpec\";\nimport { parse, DirectedGraph, Tree } from \"./parser\";\nimport { flatten } from \"ramda\";\n\nconst useStyles = makeStyles((theme: Theme) => {\n  return createStyles({\n    root: {\n      height: \"100vh\",\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n    appBar: {\n      backgroundColor: \"#fff\",\n      color: \"#000\",\n    },\n    saveButton: {\n      marginLeft: theme.spacing(6),\n    },\n    main: {\n      flexGrow: 1,\n      flexDirection: \"row-reverse\",\n      overflow: \"auto\",\n      padding: theme.spacing(1),\n    },\n    pane: {\n      height: \"100%\",\n    },\n    paper: {\n      color: theme.palette.text.secondary,\n      height: \"100%\",\n      overflow: \"auto\",\n    },\n  });\n});\n\n// Initialize Firebase\nfirebase.initializeApp({\n  apiKey: \"AIzaSyAcRmmHUN_Yyqd0al0MSvRz82kIbrHvh-8\",\n  authDomain: \"hierarchy-28591.firebaseapp.com\",\n  databaseURL: \"https://hierarchy-28591.firebaseio.com\",\n  projectId: \"hierarchy-28591\",\n  storageBucket: \"hierarchy-28591.appspot.com\",\n  messagingSenderId: \"761635818549\",\n  appId: \"1:761635818549:web:b6d6fecfd7747c6345f57c\",\n  measurementId: \"G-TJJF0BJ57G\",\n});\nconst firestore = firebase.firestore();\n\nexport default function App() {\n  return (\n    <Router>\n      <Switch>\n        <Route\n          path=\"/:docId\"\n          render={({ match }) => <GraphContainer docId={match.params.docId} />}\n        />\n        <Route path=\"/\" render={() => <GraphContainer docId=\"default\" />} />\n      </Switch>\n    </Router>\n  );\n}\n\ntype GraphContainerProps = {\n  docId: string;\n};\n\nfunction makeid(length: number): string {\n  var result = \"\";\n  var characters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n  var charactersLength = characters.length;\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n  return result;\n}\n\nfunction GraphContainer({ docId }: GraphContainerProps) {\n  const [data, setData] = useState(\"\");\n  const [redirect, setRedirect] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchDoc = async () => {\n      const doc = await firestore.collection(\"graphs\").doc(docId).get();\n      const data = doc.data()?.graph;\n      if (!doc.exists || data === null) {\n        setRedirect(\"\");\n      } else {\n        setRedirect(null);\n        setData(data.replace(/\\\\n/gi, \"\\n\"));\n      }\n    };\n    fetchDoc();\n  }, [docId]);\n\n  if (redirect !== null) {\n    return <Redirect to={redirect} />;\n  }\n  return (\n    <Graph\n      data={data}\n      handleChange={setData}\n      handleSave={async (data) => {\n        const id = makeid(6);\n        await firestore.collection(\"graphs\").doc(id).set({ graph: data });\n        setRedirect(id);\n      }}\n    />\n  );\n}\n\ntype GraphProps = {\n  data: string;\n  handleChange(data: string): void;\n  handleSave(data: string): void;\n};\n\nfunction MultiTree({ multiTree }: { multiTree: DirectedGraph }) {\n  return (\n    <>\n      {multiTree.roots.map((root, index) => {\n        const tree = Tree.fromRoot(root);\n        const depth = tree.depth;\n        const width = depth === Infinity ? 600 : 120 * depth;\n        const breadth = tree.breadth;\n        const space = 30 * Math.E ** (-breadth / 40) + 7;\n        const height = breadth * space;\n        return (\n          <Vega\n            key={index}\n            spec={{ ...treeSpec, width, height }}\n            data={{ tree: tree.data }}\n          />\n        );\n      })}\n    </>\n  );\n}\n\ninterface RefObject {\n  getModel: () => void;\n}\n\nfunction Graph({ data, handleChange, handleSave }: GraphProps) {\n  const editorRef = useRef<RefObject | null>(null);\n  const classes = useStyles();\n  const [isEditorReady, setIsEditorReady] = useState(false);\n  const [directedGraph, pairToPositions] = parse(data);\n  const [tree, rest] = directedGraph.findTree();\n  const errors = flatten(\n    rest.map((pair) => pairToPositions[`${pair[0]} -> ${pair[1]}`])\n  ).map(({ startRow, startCol, endRow, endCol }) => ({\n    startLineNumber: startRow,\n    startColumn: startCol,\n    endLineNumber: endRow,\n    endColumn: endCol,\n    message: \"This arrow is discarded as it makes the tree invalid.\",\n  }));\n\n  useLayoutEffect(() => {\n    monaco.init().then((monacoInstance) => {\n      if (isEditorReady && editorRef.current !== null) {\n        monacoInstance.editor.setModelMarkers(\n          editorRef.current.getModel(),\n          \"owner\",\n          errors.map((error) => ({\n            ...error,\n            severity: monacoInstance.MarkerSeverity.Error,\n          }))\n        );\n      }\n    });\n  });\n\n  const handleEditorDidMount: EditorDidMount = (_, editor) => {\n    setIsEditorReady(true);\n    editorRef.current = editor;\n  };\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" className={classes.appBar} elevation={1}>\n        <Toolbar>\n          <Typography variant=\"h6\">Visualize Hierarchical Data</Typography>\n          <Button\n            className={classes.saveButton}\n            onClick={() => handleSave(data)}\n          >\n            <SaveOutlinedIcon />\n            save\n          </Button>\n        </Toolbar>\n      </AppBar>\n      <Grid container spacing={1} className={classes.main}>\n        <Grid item xs={12} md={8} className={classes.pane}>\n          <Paper variant=\"outlined\" className={classes.paper} square>\n            <MultiTree multiTree={tree} />\n          </Paper>\n        </Grid>\n        <Grid item xs={12} md={4} className={classes.pane}>\n          <Paper variant=\"outlined\" className={classes.paper} square>\n            <Editor\n              language=\"plain_text\"\n              value={data}\n              width=\"100%\"\n              editorDidMount={handleEditorDidMount}\n              onChange={(_, value) =>\n                value === undefined ? value : handleChange(value)\n              }\n              options={{\n                minimap: { enabled: false },\n                scrollBeyondLastLine: false,\n              }}\n            />\n          </Paper>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}